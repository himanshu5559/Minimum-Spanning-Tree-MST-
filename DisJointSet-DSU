#include<bits/stdc++.h>
using namespace std;

class DisjointSet {
    vector<int> size,parent;
   public:
    DisjointSet(int n){
         size.resize(n+1,0);
         parent.resize(n+1);
         for(int i=0;i<=n;i++){
            parent[i] = i;
         }
    }

    int findUParent(int node){
        if(node == parent[node]) return node;
        return parent[node] = findUParent(parent[node]);
    }

    void UnionBysize(int u,int v){
        int ulp_u = findUParent(u);
        int ulp_v = findUParent(v);
        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }else if(size[ulp_v] < size[ulp_u]){
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

int main(){
    DisjointSet ds(7);
    ds.UnionBysize(1,2);
    ds.UnionBysize(2,3);
    ds.UnionBysize(4,5);
    ds.UnionBysize(6,7);
    ds.UnionBysize(5,6);
    ds.UnionBysize(3,7);
    return 0;
}
