    int spanningTree(int V, vector<vector<int>>& edges) {
        vector<vector<pair<int,int>>> adj(V);
        for(auto it: edges){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        
        priority_queue< pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
        pq.push({0,0}); // **
        vector<int> vis(V,0);
        int sum = 0;
    
        while(!pq.empty()){
            auto iter = pq.top();
            int wt = iter.first;
            int node = iter.second;
            pq.pop();
            
            if(vis[node]) continue;
            vis[node] = 1;
            sum += wt;
            
            for(auto it: adj[node]){
                int adjNode = it.first;
                int ew = it.second;
                if(!vis[adjNode]){
                    pq.push({ew,adjNode});
                }
            }
        }
                return sum;
    }       
      // **  //storing {wt,node} because there is no need of storing parent (we only finding MST sum not MST)
      // **  // if they ask to get MST then we have to store {wt,node,parent} too!!
        
